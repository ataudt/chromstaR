%\VignetteIndexEntry{The chromstaR users guide}
%\VignetteDepends{chromstaR}
%\VignetteKeywords{ChIP-seq}
%\VignettePackage{chromstaR}
\documentclass[11pt]{article}
\usepackage{hyperref}
\usepackage{url}
\usepackage[authoryear,round]{natbib}
\bibliographystyle{plainnat}

\newcommand{\scscst}{\scriptscriptstyle}
\newcommand{\scst}{\scriptstyle}

\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textit{#1}}}

\author{Aaron Taudt\footnote{a.s.taudt@umcg.nl}}
\begin{document}
\title{The chromstaR user's guide}

\maketitle

\tableofcontents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Introduction}

ChIP-seq has become the standard technique for assessing the genome-wide chromatin state of DNA. \Rpackage{chromstaR} provides functions for the joint analysis of multiple ChIP-seq samples. It allows peak calling for transcription factor binding and histone modifications with a narrow (e.g. H3K4me3, H3K27ac,~...) or broad (e.g. H3K36me3, H3K27me3,~...) profile. All analysis can be performed on each sample individually (=univariate), or in a joint analysis considering all samples simultaneously (=multivariate).

<<annotate,echo=FALSE>>=
options(fig.width=120)
@

\section{Outline of workflow}

Every analysis with the \Rpackage{chromstaR} package starts from aligned reads in either BAM or BED format. In the first step, the genome is partitioned into non-overlapping, equally sized bins and the reads that fall into each bin are counted. These read counts serve as the basis for both the univariate and the multivariate peak- and broad-region calling. Univariate peak calling is done by fitting a three-state Hidden Markov Model to the binned read counts. Multivariate peak calling for $\mathcal{S}$ samples is done by fitting a $2^\mathcal{S}$-state Hidden Markov Model to all binned read counts.

\section{Univariate analysis}

\subsection{\label{sec:narrow}Task 1: Peak calling for a narrow histone modification}

Examples of histone modifications with a narrow profile are H3K4me3, H3K9ac and H3K27ac. For such peak-like modifications, the bin size should be set to a value between 200bp and 1000bp.

If you want to do this example starting from a BAM file, you should have the \Rpackage{chromstaRExampleData} package installed. Otherwise you can skip the first step (Binning) and start from already binned data. If your input is in BED format, use function \Rfunction{bed2binned} instead. Please refer to the FAQ section \ref{sec:faq} for more details and troubleshooting on the binning step.

\begin{scriptsize}
<<univariate_narrow_library, results='hide', message=FALSE, eval=TRUE>>=
library(chromstaR)
@

<<univariate_narrow_binning, results='hide', message=FALSE, eval=TRUE>>=
## === Step 1: Binning ===
# !!! Skip this step if you do not have package 'chromstaRExampleData' installed !!!
# We use bin size 1000bp and chromosome 12 to keep the example quick
library(chromstaRExampleData)
bamfile <- getExampleFilesBAM('H3K4me3')[1]
binned.data <- bam2binned(bamfile, bamindex=bamfile, binsize=1000,
                          chromosomes='chr12')
@

<<univariate_narrow_peak_calling, results='markup', eval=TRUE>>=
## === Step 2: Peak calling ===
# We load the binned.data from step 1 (this is only necessary if step 1 was skipped)
data("liver-H3K4me3-BN-male-bio2-tech1_chr12.bam_binsize_1000")
# We restrict the peak calling to 60 seconds to keep this example quick.
model <- callPeaksUnivariate(binned.data, ID='H3K4me3', max.time=60)
@

<<univariate_narrow_plotting, fig.width=6, fig.height=4>>=
## === Step 3: Checking the fit ===
# For a narrow modification, the fit should look something like this,
# with the 'modified'-component near the bottom of the figure
plot(model)
@

<<univariate_narrow_export, results='hide', message=FALSE, eval=FALSE>>=
## === Step 4: Export to genome browser ===
# We can export peak calls and binned read counts with
exportUnivariates(list(model), filename='your-peak-file', what='peaks')
exportUnivariates(list(model), filename='your-read-file', what='reads')
@
\end{scriptsize}

\subsection{\label{sec:broad}Task 2: Peak calling for a broad histone modification}

Examples of histone modifications with a broad profile are H3K9me3, H3K27me3, H3K36me3, H4K20me1. These modifications usually cover broad domains of the genome, and the enrichment is best captured with a bin size between 500bp and 2000bp.

If you want to do this example starting from a BAM file, you should have the \Rpackage{chromstaRExampleData} package installed. Otherwise you can skip the first step (Binning) and start from already binned data. If your input is in BED format, use function \Rfunction{bed2binned} instead. Please refer to the FAQ section \ref{sec:faq} for more details and troubleshooting on the binning step.

\begin{scriptsize}
<<univariate_broad_library, results='hide', message=FALSE, eval=TRUE>>=
library(chromstaR)
@

<<univariate_broad_binning, results='hide', message=FALSE, eval=TRUE>>=
## === Step 1: Binning ===
# !!! Skip this step if you do not have package 'chromstaRExampleData' installed !!!
# We use bin size 1000bp and chromosome 12 to keep the example quick
library(chromstaRExampleData)
bamfile <- getExampleFilesBAM('H3K27me3')[4]
binned.data <- bam2binned(bamfile, bamindex=bamfile, binsize=1000,
                          chromosomes='chr12')
@

<<univariate_broad_peak_calling, results='markup', eval=TRUE>>=
## === Step 2: Peak calling ===
# We load the binned.data from step 1 (this is only necessary if step 1 was skipped)
data("liver-H3K27me3-BN-male-bio3-tech1_chr12.bam_binsize_1000")
# We restrict the peak calling to 60 seconds to keep this example quick.
model <- callPeaksUnivariate(binned.data, ID='H3K27me3', max.time=60)
@

<<univariate_broad_plotting, fig.width=6, fig.height=4>>=
## === Step 3: Checking the fit ===
# For a broad modification, the fit should look something like this,
# with a 'modified'-component that fits the thick tail of the distribution.
plot(model)
@

<<univariate_broad_H4K20me1, echo=FALSE, results='hide', message=FALSE, fig.width=6, fig.height=4>>=
data("liver-H4K20me1-BN-male-bio2-tech1_chr12.bam_binsize_1000")
model <- callPeaksUnivariate(binned.data, ID='H4K20me1', max.time=60)
print(plot(model))
@

<<univariate_broad_export, results='hide', message=FALSE, eval=FALSE>>=
## === Step 4: Export to genome browser ===
# We can export peak calls and binned read counts with
exportUnivariates(list(model), filename='your-peak-file', what='peaks')
exportUnivariates(list(model), filename='your-read-file', what='reads')
@
\end{scriptsize}

\subsection{Task 3: Peak calling for ATAC-seq, DNase-seq, FAIRE-seq, ...}

Peak calling for ATAC-seq and DNase-seq is similar to the peak calling of a narrow histone modification (see section~\ref{sec:narrow}). FAIRE-seq experiments seem to exhibit a broad profile with our model, so the procedure is similar to the domain calling of a broad histone modification (see section~\ref{sec:broad}).

\section{Multivariate analysis}
\subsection{Task 1: Integrating multiple replicates}

\Rpackage{chromstaR} can be used to call peaks with multiple replicates, without the need of prior merging. The underlying statistical model integrates information from all replicates to identify common peaks. It is, however, important to note that replicates with poor quality can affect the joint peak calling negatively. It is therefore recommended to first check the replicate quality and discard poor-quality replicates. The necessary steps for peak calling for an example ChIP-seq experiment with 4 replicates are detailed below.

\begin{scriptsize}
<<univariate_replicate_library, results='hide', message=FALSE, eval=TRUE>>=
library(chromstaR)
@

<<multivariate_replicate_binning, results='hide', message=FALSE, eval=TRUE>>=
## === Step 1: Binning ===
# !!! Skip this step if you do not have package 'chromstaRExampleData' installed !!!
library(chromstaRExampleData)
# Let's get some example data with 3 replicates
bamfiles.good <- getExampleFilesBAM('H3K27me3')[3:5]
# We fake a replicate with poor quality by taking a different mark entirely
bamfiles.poor <- getExampleFilesBAM('H4K20me1')[1]
bamfiles <- c(bamfiles.good, bamfiles.poor)
# We use bin size 1000bp and chromosome 12 to keep the example quick
binned.data <- list()
for (bamfile in bamfiles) {
  binned.data[[basename(bamfile)]] <- bam2binned(bamfile, bamindex=bamfile,
                                                 binsize=1000, chromosomes='chr12')
}
@

<<multivariate_replicate_univariate, results='hide', message=FALSE, eval=TRUE>>=
## === Step 2: Univariate peak calling ===
# We load the binned.data from step 1 (this is only necessary if step 1 was skipped)
data(replicateExample_binnedData)
# The univariate fit is obtained for each replicate
models <- list()
for (i1 in 1:length(binned.data)) {
  models[[i1]] <- callPeaksUnivariate(binned.data[[i1]], ID=paste0('Rep',i1),
                                      max.time=60)
}
@

<<multivariate_replicate_peak_calling, results='hide', message=FALSE, eval=TRUE>>=
## === Step 3: Check replicate correlation ===
# We run a multivariate peak calling on all 4 replicates
# A warning is issued because replicate 4 is very different from the others
multi.model <- callPeaksReplicates(models, max.time=60)
@
<<multivariate_replicate_check, results='markup', eval=TRUE>>=
# Checking the correlation confirms that Rep4 is very different from the others
multi.model$replicateInfo$correlation
@

<<multivariate_replicate_peak_calling2, results='hide', message=FALSE, eval=TRUE>>=
## === Step 4: Peak calling with replicates ===
# We redo the previous step without the "bad" replicate
# Also, we force all replicates to agree in their peak calls
multi.model <- callPeaksReplicates(models[1:3], force.equal=TRUE, max.time=60)
@

<<multivariate_replicate_export, results='hide', message=FALSE, eval=FALSE>>=
## === Step 5: Export to genome browser ===
# Finally, we can export the results as BED file
exportMultivariate(multi.model, filename='your-peak-file', what='peaks')
exportMultivariate(multi.model, filename='your-read-file', what='reads')
@
\end{scriptsize}

\subsection{Task 2: Detecting differentially modified regions}

\Rpackage{chromstaR} is extremely powerful in detecting differentially modified regions in two or more samples. The following example illustrates this on ChIP-seq data for H3K36me3 in 7 different human brain tissues. With 7 samples we can have $2^7 = 128$ combinatorial states, which can be readily interpreted as '0: all samples unmodified', '1-126: DMR' and '127: all samples modified'. Having several replicates for each sample makes it more complicated, but you get the idea ...

\begin{scriptsize}
<<univariate_differential_library, results='hide', message=FALSE, eval=TRUE>>=
library(chromstaR)
@

<<multivariate_differential_binning, results='hide', message=FALSE, eval=FALSE>>=
## === Step 1: Binning ===
# !!! Skip this step if you do not have package 'chromstaRExampleData' installed !!!
library(chromstaRExampleData)
# Let's get some example data with 3 replicates
bedfiles <- getExampleFilesBED()
# We use bin size 1000bp and chromosome 22 to keep the example quick
binned.data <- list()
for (bedfile in bedfiles) {
  binned.data[[basename(bedfile)]] <- bed2binned(bedfile, assembly='hg19',
                                                 binsize=1000, chromosomes='chr22')
}
@

<<multivariate_differential_univariate, results='hide', message=FALSE, eval=TRUE>>=
## === Step 2: Univariate peak calling ===
# We load the binned.data from step 1 (this is only necessary if step 1 was skipped)
data(differentialExample_binnedData)
# The univariate fit is obtained for each sample
models <- list()
for (i1 in 1:length(binned.data)) {
  message("Fitting model ", i1)
  models[[i1]] <- callPeaksUnivariate(binned.data[[i1]], ID=names(binned.data)[i1],
                                      max.time=60, verbosity=0)
}
@

<<multivariate_differential_stateBrewer, results='markup', message=TRUE, eval=TRUE>>=
## === Step 3: Constructing the combinatorial states ===
# This step is only necessary if you have replicates for each sample.
# To ensure that replicates are treated as such, and not as independent
# samples, we have to construct the proper combinatorial states:

# First, we get all the tissues (we could specify them by hand, but we are lazy)
IDs <- names(binned.data)
tissues <- unlist(lapply(strsplit(IDs, '.Brain_|\\.'), '[[', 2))
print(tissues)
# Second, we obtain the combinatorial states
# Look up ?stateBrewer on how to use this function
states <- stateBrewer(statespec = paste0('r.', tissues))
# Third, we construct common states
common.states <- c(stateBrewer(statespec = paste0('1.', tissues)),
                   stateBrewer(statespec = paste0('0.', tissues)))
@

<<multivariate_differential_multivariate, results='markup', message=TRUE, eval=TRUE>>=
## === Step 4: Multivariate peak calling ===
multi.model <- callPeaksMultivariate(models, use.states=states, eps=1, max.time=60)
@

<<multivariate_differential_export, results='hide', message=FALSE, eval=FALSE>>=
## === Step 5: Export to genome browser ===
# Export only differential peaks by excluding the 'common.states'
exportMultivariate(multi.model, filename='your-peak-file', what='peaks',
                   exclude.states=common.states)
exportMultivariate(multi.model, filename='your-read-file', what='reads',
                   exclude.states=common.states)
exportMultivariate(multi.model, filename='your-combstates-file', what='combstates',
                   exclude.states=common.states)
@
\end{scriptsize}

\subsection{Task 3: Finding combinatorial chromatin states}

TODO: Introduction

\begin{scriptsize}
<<univariate_combinatorial_library, results='hide', message=FALSE, eval=TRUE>>=
library(chromstaR)
@

<<multivariate_combinatorial_binning, results='hide', message=FALSE, eval=FALSE>>=
## === Step 1: Binning ===
# !!! Skip this step if you do not have package 'chromstaRExampleData' installed !!!
library(chromstaRExampleData)
# Let's get some example data with 3 replicates
bamfiles <- getExampleFilesBAM()
# We use bin size 1000bp and chromosome 22 to keep the example quick
binned.data <- list()
for (bamfile in bamfiles) {
  binned.data[[basename(bamfile)]] <- bam2binned(bamfile, bamindex=bamfile,
                                                 binsize=1000, chromosomes='chr12')
}
@

<<multivariate_combinatorial_univariate, results='hide', message=FALSE, eval=TRUE>>=
## === Step 2: Univariate peak calling ===
# We load the binned.data from step 1 (this is only necessary if step 1 was skipped)
data(combinatorialExample_binnedData)
# The univariate fit is obtained for each sample
models <- list()
for (i1 in 1:length(binned.data)) {
  message("Fitting model ", i1)
  models[[i1]] <- callPeaksUnivariate(binned.data[[i1]], ID=names(binned.data)[i1],
                                      max.time=60, verbosity=0)
}
@

<<multivariate_combinatorial_stateBrewer, results='markup', message=TRUE, eval=TRUE>>=
## === Step 3: Constructing the combinatorial states ===
# This step is only necessary if you have replicates for each sample.
# To ensure that replicates are treated as such, and not as independent
# samples, we have to construct the proper combinatorial states:

# First, we get all the histone marks (we could specify them by hand, but we are lazy)
IDs <- names(binned.data)
marks <- unlist(lapply(strsplit(IDs, 'liver-|-BN'), '[[', 2))
print(marks)
# Second, we obtain the combinatorial states
# Look up ?stateBrewer on how to use this function
states <- stateBrewer(statespec = paste0('r.', marks))
@

<<multivariate_combinatorial_multivariate, results='markup', message=TRUE, eval=TRUE>>=
## === Step 4: Multivariate peak calling ===
multi.model <- callPeaksMultivariate(models, use.states=states, eps=1, max.time=60)
# Let's have a look at the results
multi.model$bins
@

<<multivariate_combinatorial_export, results='hide', message=FALSE, eval=FALSE>>=
## === Step 5: Export to genome browser ===
# Export combinatorial states
exportMultivariate(multi.model, filename='your-file', what=c('peaks','reads'))
exportMultivariate(multi.model, filename='your-combstates', what=c('combstates'))
@
\end{scriptsize}

\section{Example workflows}

\section{\label{sec:faq}FAQ}

\section{Session Info}
\begin{scriptsize}
<<>>=
sessionInfo()
warnings()
@
\end{scriptsize}

\end{document}

